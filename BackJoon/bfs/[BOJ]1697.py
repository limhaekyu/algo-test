"""
 문제

수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다.
수빈이는 걷거나 순간이동을 할 수 있다.
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다.
순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.
수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

 입력

첫번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

 출력

수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

1. 아이디어
- K가 N의 2배인지 확인
- bfs를 통해 현재 1초 만에 갈 수 있는 길을 체크
- 최단 시간을 출력하는 문제이기 때문에 재방문 체크 필요

2. 시간복잡도

3. 자료구조
- 좌표: int[][]
- 방문여부 : bool[]

"""

import sys
from collections import deque
input = sys.stdin.readline

def bfs():

    queue = deque([n])

    # 큐에 탐색해야 하는 노드 없을 때 까지 진행

    while queue:
        a = queue.popleft()

        if a == k:
            print(graph[a])
            break

        # 1초에 움직일 수 있는 3가지 방법
        for i in (a-1, a+1, a * 2):
            # 정해진 위치로 이동했고 이동하지 않은 위치라면 현재 이동시간 + 1을 하여 현재 위치까지 가기 위한 시간을 초기화
            # 그리고 다시 리스트에 추가해 그 위치에서 다시 이동
            if 0 <= i <= 100000 and not graph[i]:
                graph[i] = graph[a] + 1
                queue.append(i)

n, k = map(int, input().split())
graph = [0] * 100001
bfs()

